import path from 'path';
import { remove, readFile, readdir, appendFile } from 'fs-extra';
import {argv} from 'yargs';
import glob from 'glob-promise';

import { checkPathExists, copyDir, createSymlink } from './utils'

const NAME = '<%= templateConfig.name %>';

const componentsSrc = path.resolve(process.cwd(), path.join('..', 'components', 'dist'));
const componentDocsSrc = path.resolve(process.cwd(), path.join('..', 'components', 'docs'));
const staticDir = path.resolve(process.cwd(), path.join('.docz', 'static'));
const dest = path.resolve(process.cwd(), path.join('.docz', 'static', 'stencil'));
const componentDocsDest = path.resolve(process.cwd(), path.join('.docz', 'static', 'stencil-docs'));
const srcTestFile = path.resolve(dest, path.join('<%= templateConfig.name %>.js'));


async function cleanDestDirIfNecessary() {
  try {
    let cleanDestDir = false;

    const exists = await checkPathExists(srcTestFile);
    if (exists) {
      const dirEntries = await readdir(staticDir, { withFileTypes: true });
      const stencilDir = dirEntries.find((dirEntry) => dirEntry.name === 'stencil');
      const isSymlink = stencilDir && stencilDir.isSymbolicLink();

      if (argv.build || (!isSymlink && !argv.build)) {
        cleanDestDir = true;
      }
    }

    if (cleanDestDir) {
      await remove(dest);
    }
  } catch (e) {
    console.log(e);
    throw e;
  }

}

async function createComponentImports() {
  try {
    if (argv.build) {
      return;
    }

    const files = await glob(`${componentsSrc}/collection/**/!(*.visual.spec).js`);
    const regex = /.*\/packages(\/.*)/;
    const importStrings = files.map((filePath) => {
      const matches = filePath.match(regex);
      return `import '@${NAME}${matches[1]}';`;
    });

    const gatsbyBrowserPath = 'gatsby-browser.js';

    const currentContents = await readFile(gatsbyBrowserPath);

    for (const expression of importStrings) {
      if (!currentContents.includes(expression)) {
        await appendFile(gatsbyBrowserPath, `\n${expression}`)
      }
    }
  } catch (e) {
    throw e;
  }
}

cleanDestDirIfNecessary()
.then(() => {
  if (argv.build) {
    return copyDir(componentsSrc, dest);
  }

  return createSymlink(componentsSrc, dest);
})
.then(() => createSymlink(componentDocsSrc, componentDocsDest))
.then(createComponentImports)
.then(() => process.exit(0), () => process.exit(1));
