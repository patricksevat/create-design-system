import { promises as fsPromises } from 'fs';
import path from 'path';
import {argv} from 'yargs';
import glob from 'glob-promise';

const NAME = '<%= templateConfig.name %>';

const src = path.resolve(process.cwd(), path.join('..', 'components', 'dist'));
const dest = path.resolve(process.cwd(), path.join('.docz', 'static', 'stencil'));
const srcTestFile = path.resolve(dest, path.join('<%= templateConfig.name %>.js'));

async function createSymLinkIfNecessary() {
  try {
    const symLinkExists = await checkSymlink();
    // TODO check if components are already built
    if (!symLinkExists) {
      const symlinkType = argv.symlink || process.platform.startsWith('win') ? 'junction' : 'dir';
      await fsPromises.symlink(src, dest, symlinkType);
      console.log('Symlink created');
    } else {
      console.log('Symlink already exists');
    }

    return;

  } catch (e) {
    console.log('error creating symlink');
    console.error(e);
    throw e;
  }

}

async function createComponentImports() {
  const files = await glob(`${src}/collection/**/*.js`);
  const regex = /.*\/packages(?<capture>\/.*)/;
  const importStrings = files.map((filePath) => {
    const matches = filePath.match(regex);
    return `import '@${NAME}${matches.groups.capture};`;
  });

  const gatsbyBrowserPath = 'gatsby-browser.js';

  const currentContents = await fsPromises.readFile(gatsbyBrowserPath);

  for (const expression of importStrings) {
    if (!currentContents.includes(expression)) {
      await fsPromises.appendFile(gatsbyBrowserPath, `\n${expression}`)
    }
  }
}

async function checkSymlink() {
  try {
    await fsPromises.access(srcTestFile);
    return true;
  } catch (e) {
    return false;
  }
}

createSymLinkIfNecessary()
.then(createComponentImports)
.then(() => process.exit(0), () => process.exit(1));
